syntax = "proto3";

package protocolor;

//Services define the different communication scenarios available
//A simple service for generating color
service ColorGenerator {
    //Generates a random color on each request
    rpc GetRandomColor (CurrentColor) returns (NewColor) {}
}

// Messages define the data format
message CurrentColor {
    string color = 1;
}

message NewColor {
    string color = 1;
}


// python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. ./color.proto
// protoc -I . --csharp_out=. --grpc_out=. --plugin=protoc-gen-grpc="C:\Users\cwc5421\Downloads\grpc.tools.2.26.0\tools\windows_x64\grpc_csharp_plugin.exe" color.proto
// protoc -I . --csharp_out=. --grpc_out=. --plugin=protoc-gen-grpc="C:\Users\cwc5421\Downloads\Grpc.Tools.2.26.0-dev201912021138\tools\windows_x64\grpc_csharp_plugin.exe" color.proto

// protoc -I . --csharp_out=. --grpc_out=. --plugin=protoc-gen-grpc=”H:\unity-projects\grpc.tools.2.26.0\tools\windows_x64\grpc_csharp_plugin.exe” color.proto